import pytest
from typing import AsyncGenerator, Tuple
import discord

from bot.core.bot import BotManager
from bot.config.settings import create_config
from bot.database.sqlite import SQLiteDatabaseManager

pytestmark = pytest.mark.asyncio

class MockGuild:
    """–ú–æ–∫ –≥–∏–ª—å–¥–∏–∏ Discord."""
    def __init__(self, guild_id: int):
        self.id = guild_id
        self.name = f"Test Guild {guild_id}"

class MockChannel:
    """–ú–æ–∫ –∫–∞–Ω–∞–ª–∞ Discord."""
    def __init__(self, channel_id: int):
        self.id = channel_id
        self.name = f"test-channel-{channel_id}"
        self.messages = []
    
    async def send(self, content: str = None, *, embed: discord.Embed = None):
        """–ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        message = MockMessage(
            content=content,
            embed=embed,
            channel=self,
            author=MockUser(0, "Bot", True)
        )
        self.messages.append(message)
        return message

class MockUser:
    """–ú–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord."""
    def __init__(self, user_id: int, name: str, is_bot: bool = False):
        self.id = user_id
        self.name = name
        self.bot = is_bot

class MockMessage:
    """–ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è Discord."""
    def __init__(self, content: str = None, embed: discord.Embed = None, channel: MockChannel = None, author: MockUser = None):
        self.content = content
        self.embed = embed
        self.channel = channel
        self.author = author

@pytest.fixture
async def e2e_environment() -> AsyncGenerator[Tuple[BotManager, MockGuild, MockChannel, MockUser], None]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤."""
    config = create_config()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    guild = MockGuild(1)
    channel = MockChannel(1)
    user = MockUser(123456789, "Test User")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞
    bot_manager = BotManager(config)
    bot_manager.db = SQLiteDatabaseManager(db_path="e2e_test.db")
    await bot_manager.db.init()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    await bot_manager.initialize()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    from bot.commands.task import TaskCommandHandler
    from bot.commands.help import HelpCommandHandler
    
    bot_manager.task_handler = TaskCommandHandler(bot_manager.db, bot_manager.logger)
    bot_manager.help_handler = HelpCommandHandler(bot_manager.logger)
    
    yield bot_manager, guild, channel, user
    
    await bot_manager.cleanup()

class TestBotEndToEnd:
    """End-to-end —Ç–µ—Å—Ç—ã –±–æ—Ç–∞."""
    
    async def test_complete_task_workflow(self, e2e_environment: Tuple[BotManager, MockGuild, MockChannel, MockUser]):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–µ–π."""
        bot_manager, guild, channel, user = e2e_environment
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
        from bot.commands.base import CommandContext
        
        ctx = CommandContext(
            user_id=user.id,
            channel=channel,
            send=channel.send,
            logger=bot_manager.logger
        )
        
        # –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤–º–µ—Å—Ç–æ process_commands
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        await bot_manager.task_handler.add_task(ctx, "Test E2E task")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
        response = channel.messages[-1]
        assert "‚úÖ" in response.content
        assert "Test E2E task" in response.content
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        task_id = response.content.split("#")[1].split(":")[0]
        
        # –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        await bot_manager.task_handler.list_tasks(ctx, page=1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        response = channel.messages[-1]
        assert "Test E2E task" in response.content
        assert "‚úó" in response.content  # –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        
        # –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
        await bot_manager.task_handler.mark_task_status(ctx, task_id, True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        response = channel.messages[-1]
        assert "‚úÖ" in response.content
        assert "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" in response.content
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        await bot_manager.task_handler.delete_task(ctx, task_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        response = channel.messages[-1]
        assert "üóëÔ∏è" in response.content
        assert "—É–¥–∞–ª–µ–Ω–∞" in response.content
    
    async def test_help_command(self, e2e_environment: Tuple[BotManager, MockGuild, MockChannel, MockUser]):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏."""
        bot_manager, guild, channel, user = e2e_environment
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
        from bot.commands.base import CommandContext
        
        ctx = CommandContext(
            user_id=user.id,
            channel=channel,
            send=channel.send,
            logger=bot_manager.logger
        )
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –Ω–∞–ø—Ä—è–º—É—é
        await bot_manager.help_handler.show_help(ctx)
        
        response = channel.messages[-1]
        assert response.embed is not None
        assert "Task Manager Bot" in response.embed.title
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≤ —Å–ø—Ä–∞–≤–∫–µ
        field_names = [field.name for field in response.embed.fields]
        assert any("!add" in name for name in field_names)
        assert any("!list" in name for name in field_names)
        assert any("!done" in name for name in field_names)
        assert any("!delete" in name for name in field_names)
    
    async def test_error_handling(self, e2e_environment: Tuple[BotManager, MockGuild, MockChannel, MockUser]):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
        bot_manager, guild, channel, user = e2e_environment
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
        from bot.commands.base import CommandContext
        
        ctx = CommandContext(
            user_id=user.id,
            channel=channel,
            send=channel.send,
            logger=bot_manager.logger
        )
        
        # –¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID –∑–∞–¥–∞—á–∏
        await bot_manager.task_handler.mark_task_status(ctx, "invalid_id", True)
        
        response = channel.messages[-1]
        assert "‚ùå" in response.content
        assert "ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º" in response.content
        
        # –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        await bot_manager.task_handler.add_task(ctx, "")
        
        response = channel.messages[-1]
        assert "‚ùå" in response.content
        assert "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" in response.content 