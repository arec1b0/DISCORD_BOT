import pytest
from unittest.mock import MagicMock
import discord

from bot.commands.task import TaskCommandHandler
from bot.commands.help import HelpCommandHandler
from bot.database.sqlite import SQLiteDatabaseManager

pytestmark = pytest.mark.asyncio

class TestTaskCommands:
    """–¢–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏."""
    
    @pytest.fixture
    def task_handler(self, test_db: SQLiteDatabaseManager, mock_ctx: MagicMock) -> TaskCommandHandler:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        logger = MagicMock()
        return TaskCommandHandler(test_db, logger)
    
    async def test_add_task(self, task_handler: TaskCommandHandler, mock_ctx: MagicMock):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        await task_handler.add_task(mock_ctx, "Test task")
        
        mock_ctx.send.assert_called_once()
        message = mock_ctx.send.call_args[0][0]
        assert "‚úÖ" in message
        assert "Test task" in message
    
    async def test_list_tasks_empty(self, task_handler: TaskCommandHandler, mock_ctx: MagicMock):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –∫–æ–≥–¥–∞ –Ω–µ—Ç –∑–∞–¥–∞—á."""
        await task_handler.list_tasks(mock_ctx)
        
        mock_ctx.send.assert_called_once()
        message = mock_ctx.send.call_args[0][0]
        assert "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á" in message
    
    async def test_list_tasks_with_pagination(self, task_handler: TaskCommandHandler, mock_ctx: MagicMock, test_db: SQLiteDatabaseManager):
        """–¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á."""
        # –°–æ–∑–¥–∞–µ–º 15 –∑–∞–¥–∞—á
        for i in range(15):
            await test_db.add_task(mock_ctx.author.id, f"Task {i+1}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await task_handler.list_tasks(mock_ctx, page=1)
        first_page = mock_ctx.send.call_args[0][0]
        assert "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/2" in first_page
        assert "Task 1" in first_page
        assert "Task 10" in first_page
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        mock_ctx.send.reset_mock()
        await task_handler.list_tasks(mock_ctx, page=2)
        second_page = mock_ctx.send.call_args[0][0]
        assert "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 2/2" in second_page
        assert "Task 11" in second_page
        assert "Task 15" in second_page
    
    async def test_mark_task_done(self, task_handler: TaskCommandHandler, mock_ctx: MagicMock, test_db: SQLiteDatabaseManager):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π."""
        task_id = await test_db.add_task(mock_ctx.author.id, "Task to complete")
        
        await task_handler.mark_task_status(mock_ctx, str(task_id), True)
        
        mock_ctx.send.assert_called_once()
        message = mock_ctx.send.call_args[0][0]
        assert "‚úÖ" in message
        assert "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" in message
        
        tasks = await test_db.get_tasks(mock_ctx.author.id)
        assert tasks[0].status
    
    async def test_delete_task(self, task_handler: TaskCommandHandler, mock_ctx: MagicMock, test_db: SQLiteDatabaseManager):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        task_id = await test_db.add_task(mock_ctx.author.id, "Task to delete")
        
        await task_handler.delete_task(mock_ctx, str(task_id))
        
        mock_ctx.send.assert_called_once()
        message = mock_ctx.send.call_args[0][0]
        assert "üóëÔ∏è" in message
        assert "—É–¥–∞–ª–µ–Ω–∞" in message
        
        tasks = await test_db.get_tasks(mock_ctx.author.id)
        assert len(tasks) == 0

class TestHelpCommand:
    """–¢–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏."""
    
    @pytest.fixture
    def help_handler(self, mock_ctx: MagicMock) -> HelpCommandHandler:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã help –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        logger = MagicMock()
        return HelpCommandHandler(logger)
    
    async def test_show_help(self, help_handler: HelpCommandHandler, mock_ctx: MagicMock):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."""
        await help_handler.show_help(mock_ctx)
        
        mock_ctx.send.assert_called_once()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä embed
        kwargs = mock_ctx.send.call_args.kwargs
        assert "embed" in kwargs
        
        embed = kwargs["embed"]
        assert isinstance(embed, discord.Embed)
        assert "Task Manager Bot" in embed.title
        assert len(embed.fields) > 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≤ —Å–ø—Ä–∞–≤–∫–µ
        commands = [field.name for field in embed.fields]
        assert "!add" in "".join(commands)
        assert "!list" in "".join(commands)
        assert "!done" in "".join(commands)
        assert "!delete" in "".join(commands) 