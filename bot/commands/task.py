from typing import Optional, List

from .base import BaseCommandHandler, CommandContext
from ..config.settings import CommandConstants
from ..database.models import Task

class TaskCommandHandler(BaseCommandHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏."""

    async def _validate_task_id(self, ctx: CommandContext, task_id: str) -> Optional[int]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è ID –∑–∞–¥–∞—á–∏."""
        if not task_id.isdigit():
            await ctx.send("‚ùå ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
            return None
            
        task_id = int(task_id)
        if task_id <= 0:
            await ctx.send("‚ùå ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
            return None
            
        return task_id

    async def add_task(self, ctx: CommandContext, description: str) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏."""
        if not description or description.isspace():
            await ctx.send("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
            
        try:
            task_id = await self.db.add_task(ctx.user_id, description)
            await ctx.send(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID #{task_id}: {description}")
            self.logger.info(f"User {ctx.user_id} added task {task_id}")
        except Exception as e:
            await self._handle_database_error(ctx, e, "–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")

    async def list_tasks(self, ctx: CommandContext, page: int = 1) -> None:
        """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
        if page < 1:
            await ctx.send("‚ùå –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1.")
            return
            
        offset = (page - 1) * CommandConstants.TASKS_PER_PAGE
        
        try:
            tasks: List[Task] = await self.db.get_tasks(ctx.user_id, CommandConstants.TASKS_PER_PAGE, offset)
            total_tasks = await self.db.count_tasks(ctx.user_id)
            
            if not tasks:
                if page == 1:
                    await ctx.send("üìã –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á!")
                else:
                    await ctx.send(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—Å–µ–≥–æ —É –≤–∞—Å {total_tasks} –∑–∞–¥–∞—á.")
                return
                
            total_pages = (total_tasks + CommandConstants.TASKS_PER_PAGE - 1) // CommandConstants.TASKS_PER_PAGE
            header = f"üìã –ó–∞–¥–∞—á–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}, –≤—Å–µ–≥–æ {total_tasks}):\n"
            
            task_lines = []
            for task in tasks:
                status_icon = '‚úì' if task.status else '‚úó'
                task_lines.append(f"#{task.id}: {task.description} ({status_icon})")
            
            response = header + '\n'.join(task_lines)
            
            if total_pages > 1:
                response += f"\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!list {page+1}` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–¥–∞—á." if page < total_pages else ""
            
            await ctx.send(response)
            self.logger.info(f"User {ctx.user_id} listed tasks (page {page})")
        except Exception as e:
            await self._handle_database_error(ctx, e, "–≤—ã–≤–æ–¥–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á")

    async def mark_task_status(self, ctx: CommandContext, task_id: str, status: bool) -> None:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏."""
        task_id = await self._validate_task_id(ctx, task_id)
        if task_id is None:
            return
        
        try:
            success = await self.db.mark_task_done(ctx.user_id, task_id, status)
            if success:
                status_text = "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" if status else "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
                await ctx.send(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ {status_text}!")
                self.logger.info(f"User {ctx.user_id} marked task {task_id} as {status_text}")
            else:
                await ctx.send(f"‚ùå –ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏–µ.")
                self.logger.warning(f"User {ctx.user_id} attempted to mark non-existent task {task_id}")
        except Exception as e:
            await self._handle_database_error(ctx, e, "–∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏")

    async def delete_task(self, ctx: CommandContext, task_id: str) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
        task_id = await self._validate_task_id(ctx, task_id)
        if task_id is None:
            return
        
        try:
            success = await self.db.delete_task(ctx.user_id, task_id)
            if success:
                await ctx.send(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ #{task_id} —É–¥–∞–ª–µ–Ω–∞!")
                self.logger.info(f"User {ctx.user_id} deleted task {task_id}")
            else:
                await ctx.send(f"‚ùå –ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —É–¥–∞–ª–µ–Ω–∏–µ.")
                self.logger.warning(f"User {ctx.user_id} attempted to delete non-existent task {task_id}")
        except Exception as e:
            await self._handle_database_error(ctx, e, "—É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏") 